{"paragraphs":[{"title":"Import needed packages","text":"import org.apache.spark._\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.Dataset\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.DecisionTreeClassifier\nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.feature.StringIndexer\nimport org.apache.spark.ml.tuning.ParamGridBuilder\nimport org.apache.spark.ml.tuning.CrossValidator\nimport org.apache.spark.ml.feature.VectorAssembler","user":"anonymous","dateUpdated":"2017-11-07T11:18:43-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark._\n\nimport org.apache.spark.sql.SparkSession\n\nimport org.apache.spark.sql.functions._\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.sql._\n\nimport org.apache.spark.sql.Dataset\n\nimport org.apache.spark.ml.Pipeline\n\nimport org.apache.spark.ml.classification.DecisionTreeClassifier\n\nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel\n\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\n\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\n\nimport org.apache.spark.ml.feature.StringIndexer\n\nimport org.apache.spark.ml.tuning.ParamGridBuilder\n\nimport org.apache.spark.ml.tuning.CrossValidator\n\nimport org.apache.spark.ml.feature.VectorAssembler\n"}]},"apps":[],"jobName":"paragraph_1510080465253_2063433426","id":"20170508-144514_403247535","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:18:43-0800","dateFinished":"2017-11-07T11:18:50-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5059"},{"text":"%md \nFor this tutorial, we'll be using the Orange Telecoms Churn Dataset. It consists of cleaned customer activity data (features), along with a churn label specifying whether the customer canceled their subscription or not. The input  csv file has the following format: \nKS,128,415,No,Yes,25,265.1,110,45.07,197.4,99,16.78,244.7,91,11.01,10.0,3,2.7,1,False\n\nWe use a Scala case class and Structype to define the schema, corresponding to a line in the csv data file.","dateUpdated":"2017-11-07T10:47:45-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>For this tutorial, we&rsquo;ll be using the Orange Telecoms Churn Dataset. It consists of cleaned customer activity data (features), along with a churn label specifying whether the customer canceled their subscription or not. The input csv file has the following format:<br/>KS,128,415,No,Yes,25,265.1,110,45.07,197.4,99,16.78,244.7,91,11.01,10.0,3,2.7,1,False</p>\n<p>We use a Scala case class and Structype to define the schema, corresponding to a line in the csv data file.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510080465258_2063048677","id":"20170530-122945_1594214131","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5060"},{"text":"","dateUpdated":"2017-11-07T10:47:45-0800","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510080465261_2060355435","id":"20170523-161130_2119104935","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:5061"},{"title":"Define Schema for csv file data","text":"  case class Account(state: String, len: Integer, acode: String,\n    intlplan: String, vplan: String, numvmail: Double,\n    tdmins: Double, tdcalls: Double, tdcharge: Double,\n    temins: Double, tecalls: Double, techarge: Double,\n    tnmins: Double, tncalls: Double, tncharge: Double,\n    timins: Double, ticalls: Double, ticharge: Double,\n    numcs: Double, churn: String)\n  val schema = StructType(Array(\n    StructField(\"state\", StringType, true),\n    StructField(\"len\", IntegerType, true),\n    StructField(\"acode\", StringType, true),\n    StructField(\"intlplan\", StringType, true),\n    StructField(\"vplan\", StringType, true),\n    StructField(\"numvmail\", DoubleType, true),\n    StructField(\"tdmins\", DoubleType, true),\n    StructField(\"tdcalls\", DoubleType, true),\n    StructField(\"tdcharge\", DoubleType, true),\n    StructField(\"temins\", DoubleType, true),\n    StructField(\"tecalls\", DoubleType, true),\n    StructField(\"techarge\", DoubleType, true),\n    StructField(\"tnmins\", DoubleType, true),\n    StructField(\"tncalls\", DoubleType, true),\n    StructField(\"tncharge\", DoubleType, true),\n    StructField(\"timins\", DoubleType, true),\n    StructField(\"ticalls\", DoubleType, true),\n    StructField(\"ticharge\", DoubleType, true),\n    StructField(\"numcs\", DoubleType, true),\n    StructField(\"churn\", StringType, true)\n  ))","user":"anonymous","dateUpdated":"2017-11-07T11:18:52-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined class Account\nschema: org.apache.spark.sql.types.StructType = StructType(StructField(state,StringType,true), StructField(len,IntegerType,true), StructField(acode,StringType,true), StructField(intlplan,StringType,true), StructField(vplan,StringType,true), StructField(numvmail,DoubleType,true), StructField(tdmins,DoubleType,true), StructField(tdcalls,DoubleType,true), StructField(tdcharge,DoubleType,true), StructField(temins,DoubleType,true), StructField(tecalls,DoubleType,true), StructField(techarge,DoubleType,true), StructField(tnmins,DoubleType,true), StructField(tncalls,DoubleType,true), StructField(tncharge,DoubleType,true), StructField(timins,DoubleType,true), StructField(ticalls,DoubleType,true), StructField(ticharge,DoubleType,true), StructField(numcs,DoubleType,true), StructField(churn,StringT..."}]},"apps":[],"jobName":"paragraph_1510080465269_2069589409","id":"20170508-150032_326029627","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:18:52-0800","dateFinished":"2017-11-07T11:18:54-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5062"},{"title":"Read the data from CSV file into a Dataset of Account type","text":"import spark.implicits._\nval train: Dataset[Account] = spark.read.option(\"inferSchema\", \"false\")\n      .schema(schema).csv(\"/user/user01/data/churn-bigml-80.csv\").as[Account]\ntrain.count()  \ntrain.cache()\ntrain.first()","user":"anonymous","dateUpdated":"2017-11-07T11:19:00-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport spark.implicits._\n\ntrain: org.apache.spark.sql.Dataset[Account] = [state: string, len: int ... 18 more fields]\n\nres0: Long = 2666\n\nres1: train.type = [state: string, len: int ... 18 more fields]\n\nres2: Account = Account(KS,128,415,No,Yes,25.0,265.1,110.0,45.07,197.4,99.0,16.78,244.7,91.0,11.01,10.0,3.0,2.7,1.0,False)\n"}]},"apps":[],"jobName":"paragraph_1510080465272_2068435162","id":"20170508-150131_378637203","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:19:00-0800","dateFinished":"2017-11-07T11:19:14-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5063"},{"text":"val test: Dataset[Account] = spark.read.option(\"inferSchema\", \"false\")\n      .schema(schema).csv(\"/user/user01/data/churn-bigml-20.csv\").as[Account]\ntest.count()      \ntest.first()\n    ","user":"anonymous","dateUpdated":"2017-11-07T11:19:10-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ntest: org.apache.spark.sql.Dataset[Account] = [state: string, len: int ... 18 more fields]\n\nres3: Long = 667\n\nres4: Account = Account(LA,117,408,No,No,0.0,184.5,97.0,31.37,351.6,80.0,29.89,215.8,90.0,9.71,8.7,4.0,2.35,1.0,False)\n"}]},"apps":[],"jobName":"paragraph_1510080465275_2068819911","id":"20170508-150324_497571301","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:19:10-0800","dateFinished":"2017-11-07T11:19:19-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5064"},{"title":"Register Dataset as a Table , display first 20 rows ","text":"train.createOrReplaceTempView(\"account\")\nspark.catalog.cacheTable(\"account\")\ntrain.show","user":"anonymous","dateUpdated":"2017-11-07T11:09:07-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":true,"setting":{"stackedAreaChart":{}},"commonSetting":{},"keys":[{"name":"churn","index":19,"aggr":"sum"}],"groups":[],"values":[{"name":"len","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+\n|state|len|acode|intlplan|vplan|numvmail|tdmins|tdcalls|tdcharge|temins|tecalls|techarge|tnmins|tncalls|tncharge|timins|ticalls|ticharge|numcs|churn|\n+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+\n|   KS|128|  415|      No|  Yes|    25.0| 265.1|  110.0|   45.07| 197.4|   99.0|   16.78| 244.7|   91.0|   11.01|  10.0|    3.0|     2.7|  1.0|False|\n|   OH|107|  415|      No|  Yes|    26.0| 161.6|  123.0|   27.47| 195.5|  103.0|   16.62| 254.4|  103.0|   11.45|  13.7|    3.0|     3.7|  1.0|False|\n|   NJ|137|  415|      No|   No|     0.0| 243.4|  114.0|   41.38| 121.2|  110.0|    10.3| 162.6|  104.0|    7.32|  12.2|    5.0|    3.29|  0.0|False|\n|   OH| 84|  408|     Yes|   No|     0.0| 299.4|   71.0|    50.9|  61.9|   88.0|    5.26| 196.9|   89.0|    8.86|   6.6|    7.0|    1.78|  2.0|False|\n|   OK| 75|  415|     Yes|   No|     0.0| 166.7|  113.0|   28.34| 148.3|  122.0|   12.61| 186.9|  121.0|    8.41|  10.1|    3.0|    2.73|  3.0|False|\n|   AL|118|  510|     Yes|   No|     0.0| 223.4|   98.0|   37.98| 220.6|  101.0|   18.75| 203.9|  118.0|    9.18|   6.3|    6.0|     1.7|  0.0|False|\n|   MA|121|  510|      No|  Yes|    24.0| 218.2|   88.0|   37.09| 348.5|  108.0|   29.62| 212.6|  118.0|    9.57|   7.5|    7.0|    2.03|  3.0|False|\n|   MO|147|  415|     Yes|   No|     0.0| 157.0|   79.0|   26.69| 103.1|   94.0|    8.76| 211.8|   96.0|    9.53|   7.1|    6.0|    1.92|  0.0|False|\n|   WV|141|  415|     Yes|  Yes|    37.0| 258.6|   84.0|   43.96| 222.0|  111.0|   18.87| 326.4|   97.0|   14.69|  11.2|    5.0|    3.02|  0.0|False|\n|   RI| 74|  415|      No|   No|     0.0| 187.7|  127.0|   31.91| 163.4|  148.0|   13.89| 196.0|   94.0|    8.82|   9.1|    5.0|    2.46|  0.0|False|\n|   IA|168|  408|      No|   No|     0.0| 128.8|   96.0|    21.9| 104.9|   71.0|    8.92| 141.1|  128.0|    6.35|  11.2|    2.0|    3.02|  1.0|False|\n|   MT| 95|  510|      No|   No|     0.0| 156.6|   88.0|   26.62| 247.6|   75.0|   21.05| 192.3|  115.0|    8.65|  12.3|    5.0|    3.32|  3.0|False|\n|   IA| 62|  415|      No|   No|     0.0| 120.7|   70.0|   20.52| 307.2|   76.0|   26.11| 203.0|   99.0|    9.14|  13.1|    6.0|    3.54|  4.0|False|\n|   ID| 85|  408|      No|  Yes|    27.0| 196.4|  139.0|   33.39| 280.9|   90.0|   23.88|  89.3|   75.0|    4.02|  13.8|    4.0|    3.73|  1.0|False|\n|   VT| 93|  510|      No|   No|     0.0| 190.7|  114.0|   32.42| 218.2|  111.0|   18.55| 129.6|  121.0|    5.83|   8.1|    3.0|    2.19|  3.0|False|\n|   VA| 76|  510|      No|  Yes|    33.0| 189.7|   66.0|   32.25| 212.8|   65.0|   18.09| 165.7|  108.0|    7.46|  10.0|    5.0|     2.7|  1.0|False|\n|   TX| 73|  415|      No|   No|     0.0| 224.4|   90.0|   38.15| 159.5|   88.0|   13.56| 192.8|   74.0|    8.68|  13.0|    2.0|    3.51|  1.0|False|\n|   FL|147|  415|      No|   No|     0.0| 155.1|  117.0|   26.37| 239.7|   93.0|   20.37| 208.8|  133.0|     9.4|  10.6|    4.0|    2.86|  0.0|False|\n|   CO| 77|  408|      No|   No|     0.0|  62.4|   89.0|   10.61| 169.9|  121.0|   14.44| 209.6|   64.0|    9.43|   5.7|    6.0|    1.54|  5.0| True|\n|   AZ|130|  415|      No|   No|     0.0| 183.0|  112.0|   31.11|  72.9|   99.0|     6.2| 181.8|   78.0|    8.18|   9.5|   19.0|    2.57|  0.0|False|\n+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510080465281_-2143811121","id":"20170508-150408_505244914","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:09:07-0800","dateFinished":"2017-11-07T11:09:10-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5065"},{"text":"%md\nThe describe() function performs summary statistics calculations on  numeric columns ","dateUpdated":"2017-11-07T10:47:45-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The describe() function performs summary statistics calculations on numeric columns</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510080465283_-2143041623","id":"20170524-214640_973339640","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5066"},{"title":"Perform summary statistics  on selected columns","text":"\ntrain.describe(\"tdcharge\", \"techarge\",\"tncharge\", \"numcs\").show","user":"anonymous","dateUpdated":"2017-11-07T11:11:14-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+------------------+------------------+------------------+------------------+\n|summary|          tdcharge|          techarge|          tncharge|             numcs|\n+-------+------------------+------------------+------------------+------------------+\n|  count|              2666|              2666|              2666|              2666|\n|   mean|30.512404351087813|17.033072018004518| 9.052689422355604|1.5626406601650413|\n| stddev| 9.215732907163497| 4.330864176799864|2.2851195129157564|1.3112357589949093|\n|    min|               0.0|               0.0|              1.97|               0.0|\n|    max|             59.64|             30.91|             17.77|               9.0|\n+-------+------------------+------------------+------------------+------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1510080465285_-2145350116","id":"20170524-083228_1459810795","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:11:14-0800","dateFinished":"2017-11-07T11:11:16-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5067"},{"title":"Calculate the correlation between Total day minutes and Total day charge","text":"import org.apache.spark.mllib.stat.Statistics\nval tdmins = train.select(\"tdmins\").map{row:Row => row.getAs[Double](\"tdmins\")}.rdd\nval tdcharge = train.select( \"tdcharge\").map{row:Row => row.getAs[Double](\"tdcharge\")}.rdd\nval correlation = Statistics.corr(tdmins, tdcharge, \"pearson\")","user":"anonymous","dateUpdated":"2017-11-07T11:09:28-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark.mllib.stat.Statistics\n\ntdmins: org.apache.spark.rdd.RDD[Double] = MapPartitionsRDD[31] at rdd at <console>:78\n\ntdcharge: org.apache.spark.rdd.RDD[Double] = MapPartitionsRDD[34] at rdd at <console>:78\n\ncorrelation: Double = 0.9999999517969665\n"}]},"apps":[],"jobName":"paragraph_1510080465289_-2146889112","id":"20170524-093152_48310549","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:09:28-0800","dateFinished":"2017-11-07T11:09:34-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5068"},{"text":"%md \nuse Spark SQL to explore the dataset","dateUpdated":"2017-11-07T10:47:45-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>use Spark SQL to explore the dataset</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510080465291_-2146119614","id":"20170603-182655_1680505289","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5069"},{"title":"Count number customers grouped by churn","text":"train.groupBy(\"churn\").count.show\n","dateUpdated":"2017-11-07T10:47:45-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+-----+\n|churn|count|\n+-----+-----+\n|False| 2278|\n| True|  388|\n+-----+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1510080465293_2146539189","id":"20170524-093402_1430077788","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5070"},{"title":"Use sampleBy to reduce number of churn=false samples ","text":"val fractions = Map(\"False\" -> .17, \"True\" -> 1.0)\n//Here we're keeping all instances of the Churn=True class, but downsampling the Churn=False class to a fraction of 388/2278.\nval strain = train.stat.sampleBy(\"churn\", fractions, 36L)\n\nstrain.groupBy(\"churn\").count.show\nstrain.createOrReplaceTempView(\"account\")\nspark.catalog.cacheTable(\"account\")","user":"anonymous","dateUpdated":"2017-11-07T11:19:35-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nfractions: scala.collection.immutable.Map[String,Double] = Map(False -> 0.17, True -> 1.0)\n\nstrain: org.apache.spark.sql.DataFrame = [state: string, len: int ... 18 more fields]\n+-----+-----+\n|churn|count|\n+-----+-----+\n|False|  379|\n| True|  388|\n+-----+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1510080465305_-2140733129","id":"20170603-183738_564410056","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:19:35-0800","dateFinished":"2017-11-07T11:19:45-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5071"},{"title":"Explore Average statistics grouped by churn","text":"z.show(strain.groupBy(\"churn\").avg())","dateUpdated":"2017-11-07T10:47:45-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"churn","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"avg(tdmins)","index":3,"aggr":"sum"},{"name":"avg(temins)","index":6,"aggr":"sum"},{"name":"avg(tnmins)","index":9,"aggr":"sum"},{"name":"avg(timins)","index":12,"aggr":"sum"},{"name":"avg(len)","index":1,"aggr":"sum"},{"name":"avg(numcs)","index":15,"aggr":"sum"},{"name":"avg(tdcalls)","index":4,"aggr":"sum"},{"name":"avg(tecalls)","index":7,"aggr":"sum"},{"name":"avg(ticalls)","index":13,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"churn\tavg(len)\tavg(numvmail)\tavg(tdmins)\tavg(tdcalls)\tavg(tdcharge)\tavg(temins)\tavg(tecalls)\tavg(techarge)\tavg(tnmins)\tavg(tncalls)\tavg(tncharge)\tavg(timins)\tavg(ticalls)\tavg(ticharge)\tavg(numcs)\nFalse\t96.47757255936675\t8.168865435356201\t174.07730870712402\t99.45646437994723\t29.593588390501342\t200.14063324538245\t99.10554089709763\t17.01216358839051\t202.1079155672821\t98.79683377308707\t9.09472295514512\t10.081266490765167\t4.430079155672823\t2.7224538258575177\t1.3852242744063326\nTrue\t102.31958762886597\t5.170103092783505\t205.1811855670104\t101.19587628865979\t34.88134020618558\t209.38530927835052\t99.94845360824742\t17.79786082474226\t205.30721649484514\t100.68298969072166\t9.23889175257732\t10.81932989690722\t4.051546391752577\t2.9217268041237117\t2.2061855670103094\n"}]},"apps":[],"jobName":"paragraph_1510080465314_2139998457","id":"20170524-102007_926152177","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5072"},{"title":"Explore average number customer service calls grouped by churn","text":"%sql\nSELECT churn, avg(numcs) as numcs\nFROM account \nGROUP BY churn\nORDER BY numcs","dateUpdated":"2017-11-07T10:47:45-0800","config":{"editorSetting":{"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":{"0":{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"churn","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"numcs","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"churn\tnumcs\nFalse\t1.3852242744063326\nTrue\t2.2061855670103094\n"}]},"apps":[],"jobName":"paragraph_1510080465322_2136920466","id":"20170524-095127_757444423","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5073"},{"title":"Explore Average statistics grouped by churn","text":"%sql\nSELECT churn, \n  avg(tdmins) as td,\n  avg(temins) as te,\n  avg(tnmins) as tn\nFROM account \nGROUP BY churn\n","dateUpdated":"2017-11-07T10:47:45-0800","config":{"editorSetting":{"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"churn","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"td","index":1,"aggr":"avg"},{"name":"te","index":2,"aggr":"avg"},{"name":"tn","index":3,"aggr":"avg"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"churn\ttd\tte\ttn\nFalse\t174.07730870712402\t200.14063324538245\t202.1079155672821\nTrue\t205.1811855670104\t209.38530927835052\t205.30721649484514\n"}]},"apps":[],"jobName":"paragraph_1510080465329_2145000193","id":"20170524-144751_554129160","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5074"},{"title":"Drop columns that we will not use for machine learning ","text":"val ntrain = strain.drop(\"state\").drop(\"acode\").drop(\"vplan\").drop(\"tdcharge\").drop(\"techarge\").drop(\"ticharge\")\nprintln(ntrain.count)\nntrain.show\nntrain.cache","user":"anonymous","dateUpdated":"2017-11-07T11:19:52-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nntrain: org.apache.spark.sql.DataFrame = [len: int, intlplan: string ... 12 more fields]\n767\n+---+--------+--------+------+-------+------+-------+------+-------+--------+------+-------+-----+-----+\n|len|intlplan|numvmail|tdmins|tdcalls|temins|tecalls|tnmins|tncalls|tncharge|timins|ticalls|numcs|churn|\n+---+--------+--------+------+-------+------+-------+------+-------+--------+------+-------+-----+-----+\n|128|      No|    25.0| 265.1|  110.0| 197.4|   99.0| 244.7|   91.0|   11.01|  10.0|    3.0|  1.0|False|\n| 77|      No|     0.0|  62.4|   89.0| 169.9|  121.0| 209.6|   64.0|    9.43|   5.7|    6.0|  5.0| True|\n| 54|      No|     0.0| 134.3|   73.0| 155.5|  100.0| 102.1|   68.0|    4.59|  14.7|    4.0|  3.0|False|\n| 12|      No|     0.0| 249.6|  118.0| 252.4|  119.0| 280.2|   90.0|   12.61|  11.8|    3.0|  1.0| True|\n| 57|      No|    25.0| 176.8|   94.0| 195.0|   75.0| 213.5|  116.0|    9.61|   8.3|    4.0|  0.0|False|\n|135|     Yes|    41.0| 173.1|   85.0| 203.9|  107.0| 122.2|   78.0|     5.5|  14.6|   15.0|  0.0| True|\n|160|      No|     0.0|  85.8|   77.0| 165.3|  110.0| 178.5|   92.0|    8.03|   9.2|    4.0|  3.0|False|\n| 96|      No|     0.0| 160.2|  117.0| 267.5|   67.0| 228.5|   68.0|   10.28|   9.3|    5.0|  2.0|False|\n| 87|      No|     0.0| 151.0|   83.0| 219.7|  116.0| 203.9|  127.0|    9.18|   9.7|    3.0|  5.0| True|\n|121|      No|    30.0| 198.4|  129.0|  75.3|   77.0| 181.2|   77.0|    8.15|   5.8|    3.0|  3.0| True|\n| 38|      No|     0.0| 131.2|   98.0| 162.9|   97.0| 159.0|  106.0|    7.15|   8.2|    6.0|  2.0|False|\n|150|      No|     0.0| 178.9|  101.0| 169.1|  110.0| 148.6|  100.0|    6.69|  13.8|    3.0|  4.0| True|\n|147|      No|     0.0| 248.6|   83.0| 148.9|   85.0| 172.5|  109.0|    7.76|   8.0|    4.0|  3.0|False|\n| 82|      No|     0.0| 300.3|  109.0| 181.0|  100.0| 270.1|   73.0|   12.15|  11.7|    4.0|  0.0| True|\n|144|      No|     0.0|  61.6|  117.0|  77.1|   85.0| 173.0|   99.0|    7.79|   8.2|    7.0|  4.0| True|\n| 70|      No|     0.0| 170.2|   98.0| 155.2|  102.0| 228.6|   76.0|   10.29|  15.0|    2.0|  1.0|False|\n|106|      No|     0.0| 210.6|   96.0| 249.2|   85.0| 191.4|   88.0|    8.61|  12.4|    1.0|  2.0| True|\n| 94|      No|     0.0| 157.9|  105.0| 155.0|  101.0| 189.6|   84.0|    8.53|   8.0|    5.0|  4.0| True|\n|128|      No|     0.0| 237.9|  125.0| 247.6|   93.0| 208.9|   68.0|     9.4|  13.9|    4.0|  1.0| True|\n| 82|      No|     0.0| 143.9|   61.0| 194.9|  105.0| 109.6|   94.0|    4.93|  11.1|    2.0|  1.0|False|\n+---+--------+--------+------+-------+------+-------+------+-------+--------+------+-------+-----+-----+\nonly showing top 20 rows\n\n\nres14: ntrain.type = [len: int, intlplan: string ... 12 more fields]\n"}]},"apps":[],"jobName":"paragraph_1510080465336_2142306951","id":"20170524-221059_1333485772","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:19:52-0800","dateFinished":"2017-11-07T11:19:56-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5075"},{"text":"%md\nIn order for the features to be used by a machine learning algorithm, they are transformed into numbers representing the value for each feature\n","dateUpdated":"2017-11-07T10:47:45-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>In order for the features to be used by a machine learning algorithm, they are transformed into numbers representing the value for each feature</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510080465343_2141152704","id":"20170603-184811_78732818","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5076"},{"title":"Map International Plan Yes No to Numbers","text":"val ipindexer = new StringIndexer()\n      .setInputCol(\"intlplan\")\n      .setOutputCol(\"iplanIndex\")\n\n","user":"anonymous","dateUpdated":"2017-11-07T11:19:59-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nipindexer: org.apache.spark.ml.feature.StringIndexer = strIdx_b0f6ab4aeff9\n"}]},"apps":[],"jobName":"paragraph_1510080465347_2127301744","id":"20170508-150543_958647761","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:20:00-0800","dateFinished":"2017-11-07T11:20:00-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5077"},{"title":"Map churn true false to  Numbers","text":"val labelindexer = new StringIndexer()\n      .setInputCol(\"churn\")\n      .setOutputCol(\"label\")\n","user":"anonymous","dateUpdated":"2017-11-07T11:20:03-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nlabelindexer: org.apache.spark.ml.feature.StringIndexer = strIdx_826594b0bda9\n"}]},"apps":[],"jobName":"paragraph_1510080465348_2125377999","id":"20170524-222135_122500289","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:20:03-0800","dateFinished":"2017-11-07T11:20:04-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5078"},{"title":"Use VectorAssembler, a transformer,  to put features into a feature vector column","text":"val featureCols = Array(\"len\", \"iplanIndex\", \"numvmail\", \"tdmins\", \"tdcalls\", \"temins\", \"tecalls\", \"tnmins\", \"tncalls\", \"timins\", \"ticalls\", \"numcs\")\nval assembler = new VectorAssembler()\n      .setInputCols(featureCols)\n      .setOutputCol(\"features\")\n","user":"anonymous","dateUpdated":"2017-11-07T11:20:07-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nfeatureCols: Array[String] = Array(len, iplanIndex, numvmail, tdmins, tdcalls, temins, tecalls, tnmins, tncalls, timins, ticalls, numcs)\n\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_594df502c9a0\n"}]},"apps":[],"jobName":"paragraph_1510080465353_2123454255","id":"20170524-223310_2121058884","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:20:07-0800","dateFinished":"2017-11-07T11:20:09-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5079"},{"title":"Create Decision Tree Estimator , set Label and Feature Columns ","text":"val dTree = new DecisionTreeClassifier().setLabelCol(\"label\")\n      .setFeaturesCol(\"features\")","user":"anonymous","dateUpdated":"2017-11-07T11:20:16-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndTree: org.apache.spark.ml.classification.DecisionTreeClassifier = dtc_b058964cf978\n"}]},"apps":[],"jobName":"paragraph_1510080465354_2124608501","id":"20170603-185445_276463997","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:20:16-0800","dateFinished":"2017-11-07T11:20:16-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5080"},{"text":"%md\nSet up a pipeline to pass the data through transformers to extract the features and label and pass this to a decision tree estimator to fit the model \n\n","dateUpdated":"2017-11-07T10:47:45-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Set up a pipeline to pass the data through transformers to extract the features and label and pass this to a decision tree estimator to fit the model</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510080465359_2122684757","id":"20170601-154525_1033166149","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5081"},{"title":"Set up pipeline with  feature transformers and model estimator","text":"\n// put treeClassifier in a Pipeline.\n val pipeline = new Pipeline()\n      .setStages(Array(ipindexer, labelindexer, assembler, dTree))\n","user":"anonymous","dateUpdated":"2017-11-07T11:20:30-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\npipeline: org.apache.spark.ml.Pipeline = pipeline_15ec900f12c2\n"}]},"apps":[],"jobName":"paragraph_1510080465360_2133072977","id":"20170508-151557_1422077156","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:20:31-0800","dateFinished":"2017-11-07T11:20:32-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5082"},{"text":"%md\r\nSpark ML supports k-fold cross validation with a transformation/estimation pipeline to try out different combinations of parameters, using a process called grid search. You set up a CrossValidator with the parameters to test, an estimator and evaluator for a model selection workflow.\r\n","dateUpdated":"2017-11-07T10:47:45-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Spark ML supports k-fold cross validation with a transformation/estimation pipeline to try out different combinations of parameters, using a process called grid search. You set up a CrossValidator with the parameters to test, an estimator and evaluator for a model selection workflow.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510080465363_2133457726","id":"20170531-154658_1298817002","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5083"},{"title":"set up a CrossValidator with the parameters to test, an estimator and evaluator for a model selection","text":"// set param grid to Search through decision tree's maxDepth parameter for best model\n// Deeper trees are potentially more accurate, but are also more likely to overfit.\n val paramGrid = new ParamGridBuilder().addGrid(dTree.maxDepth, Array( 4, 5, 6)).build()\n val evaluator = new BinaryClassificationEvaluator()\n      .setLabelCol(\"label\")\n      .setRawPredictionCol(\"prediction\")\n\n// Set up 3-fold cross validation with paramGrid\n val crossval = new CrossValidator().setEstimator(pipeline)\n      .setEvaluator(evaluator)\n      .setEstimatorParamMaps(paramGrid).setNumFolds(3)","user":"anonymous","dateUpdated":"2017-11-07T11:20:38-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\n\n\n\n\n\n\nparamGrid: Array[org.apache.spark.ml.param.ParamMap] =\nArray({\n\tdtc_b058964cf978-maxDepth: 4\n}, {\n\tdtc_b058964cf978-maxDepth: 5\n}, {\n\tdtc_b058964cf978-maxDepth: 6\n})\n\nevaluator: org.apache.spark.ml.evaluation.BinaryClassificationEvaluator = binEval_2e762d676253\n\ncrossval: org.apache.spark.ml.tuning.CrossValidator = cv_987a837fbcf0\n"}]},"apps":[],"jobName":"paragraph_1510080465365_2131149233","id":"20170508-151903_1365343172","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:20:38-0800","dateFinished":"2017-11-07T11:20:40-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5084"},{"title":"Fit the model to the input data using K-fold cross validation","text":"val cvModel = crossval.fit(ntrain)","user":"anonymous","dateUpdated":"2017-11-07T11:20:50-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ncvModel: org.apache.spark.ml.tuning.CrossValidatorModel = cv_987a837fbcf0\n"}]},"apps":[],"jobName":"paragraph_1510080465367_2131918730","id":"20170508-151926_10766097","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:20:50-0800","dateFinished":"2017-11-07T11:21:11-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5085"},{"title":"Display the Best model ","text":"val bestModel = cvModel.bestModel\nprintln(\"The Best Model:\\n--------------------\")\nval treeModel = bestModel.asInstanceOf[org.apache.spark.ml.PipelineModel].stages(3).asInstanceOf[DecisionTreeClassificationModel]\nprintln(\"Learned classification tree model:\\n\" + treeModel.toDebugString)","user":"anonymous","dateUpdated":"2017-11-07T11:21:16-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nbestModel: org.apache.spark.ml.Model[_] = pipeline_15ec900f12c2\nThe Best Model:\n--------------------\n\ntreeModel: org.apache.spark.ml.classification.DecisionTreeClassificationModel = DecisionTreeClassificationModel (uid=dtc_b058964cf978) of depth 5 with 53 nodes\nLearned classification tree model:\nDecisionTreeClassificationModel (uid=dtc_b058964cf978) of depth 5 with 53 nodes\n  If (feature 11 <= 3.0)\n   If (feature 3 <= 222.4)\n    If (feature 1 in {1.0})\n     If (feature 9 <= 13.1)\n      If (feature 10 <= 2.0)\n       Predict: 0.0\n      Else (feature 10 > 2.0)\n       Predict: 1.0\n     Else (feature 9 > 13.1)\n      Predict: 0.0\n    Else (feature 1 not in {1.0})\n     If (feature 4 <= 125.0)\n      If (feature 3 <= 209.5)\n       Predict: 1.0\n      Else (feature 3 > 209.5)\n       Predict: 1.0\n     Else (feature 4 > 125.0)\n      If (feature 3 <= 161.2)\n       Predict: 1.0\n      Else (feature 3 > 161.2)\n       Predict: 0.0\n   Else (feature 3 > 222.4)\n    If (feature 2 <= 0.0)\n     If (feature 5 <= 183.9)\n      If (feature 3 <= 273.3)\n       Predict: 1.0\n      Else (feature 3 > 273.3)\n       Predict: 0.0\n     Else (feature 5 > 183.9)\n      If (feature 3 <= 242.2)\n       Predict: 0.0\n      Else (feature 3 > 242.2)\n       Predict: 0.0\n    Else (feature 2 > 0.0)\n     If (feature 1 in {1.0})\n      If (feature 0 <= 57.0)\n       Predict: 1.0\n      Else (feature 0 > 57.0)\n       Predict: 0.0\n     Else (feature 1 not in {1.0})\n      If (feature 3 <= 299.5)\n       Predict: 1.0\n      Else (feature 3 > 299.5)\n       Predict: 0.0\n  Else (feature 11 > 3.0)\n   If (feature 3 <= 180.9)\n    If (feature 10 <= 0.0)\n     Predict: 1.0\n    Else (feature 10 > 0.0)\n     If (feature 5 <= 273.0)\n      If (feature 5 <= 226.1)\n       Predict: 0.0\n      Else (feature 5 > 226.1)\n       Predict: 0.0\n     Else (feature 5 > 273.0)\n      If (feature 0 <= 99.0)\n       Predict: 0.0\n      Else (feature 0 > 99.0)\n       Predict: 1.0\n   Else (feature 3 > 180.9)\n    If (feature 8 <= 104.0)\n     If (feature 8 <= 81.0)\n      If (feature 4 <= 94.0)\n       Predict: 1.0\n      Else (feature 4 > 94.0)\n       Predict: 0.0\n     Else (feature 8 > 81.0)\n      If (feature 4 <= 137.0)\n       Predict: 1.0\n      Else (feature 4 > 137.0)\n       Predict: 0.0\n    Else (feature 8 > 104.0)\n     If (feature 0 <= 135.0)\n      Predict: 0.0\n     Else (feature 0 > 135.0)\n      If (feature 0 <= 160.0)\n       Predict: 1.0\n      Else (feature 0 > 160.0)\n       Predict: 0.0\n\n"}]},"apps":[],"jobName":"paragraph_1510080465368_2129994986","id":"20170508-151947_197896730","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:21:16-0800","dateFinished":"2017-11-07T11:21:18-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5086"},{"title":"fields Customer service calls and Total day minutes have high predictive power to determine a customer's likeliness to churn","text":"////0-11 feature columns: len, iplanIndex, numvmail, tdmins, tdcalls, temins, tecalls, tnmins, tncalls, timins, ticalls, numcs\rprintln( \"Feature 11: \" +  featureCols(11) +  \" Feature 3: \" +  featureCols(3))\r","user":"anonymous","dateUpdated":"2017-11-07T11:21:28-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Feature 11: numcs Feature 3: tdmins\n"}]},"apps":[],"jobName":"paragraph_1510080465371_2130379735","id":"20170524-231226_52953518","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:21:29-0800","dateFinished":"2017-11-07T11:21:29-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5087"},{"text":"%md\r\nThe actual performance of the model can be determined using the test data set which has not been used for any training or cross-validation activities. We'll transform the test set with the model pipeline, which will map the features according to the same recipe. \r\n","user":"anonymous","dateUpdated":"2017-11-07T11:21:32-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The actual performance of the model can be determined using the test data set which has not been used for any training or cross-validation activities. We&rsquo;ll transform the test set with the model pipeline, which will map the features according to the same recipe.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510080465372_2128455990","id":"20170602-155317_1487132664","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:21:32-0800","dateFinished":"2017-11-07T11:21:34-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5088"},{"title":"Get Predictions from Test set and Evaluate","text":"//transform the test set with the model pipeline, which will map the features according to the same recipe\nval predictions = cvModel.transform(test)\n","user":"anonymous","dateUpdated":"2017-11-07T11:21:41-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\npredictions: org.apache.spark.sql.DataFrame = [state: string, len: int ... 24 more fields]\n"}]},"apps":[],"jobName":"paragraph_1510080465376_2114605030","id":"20170508-155848_1997894070","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:21:41-0800","dateFinished":"2017-11-07T11:21:42-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5089"},{"text":"predictions.select(\"label\",\"prediction\", \"probability\").show","user":"anonymous","dateUpdated":"2017-11-07T11:21:46-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+----------+--------------------+\n|label|prediction|         probability|\n+-----+----------+--------------------+\n|  1.0|       1.0|[0.10676156583629...|\n|  0.0|       0.0|[0.91666666666666...|\n|  0.0|       0.0|           [1.0,0.0]|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|           [0.1,0.9]|\n|  1.0|       1.0|[0.27027027027027...|\n|  0.0|       0.0|[0.91666666666666...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.48275862068965...|\n|  1.0|       1.0|[0.27027027027027...|\n|  1.0|       1.0|[0.10676156583629...|\n|  0.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.10676156583629...|\n|  0.0|       0.0|[0.95192307692307...|\n|  1.0|       0.0|[0.57142857142857...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|         [0.08,0.92]|\n+-----+----------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510080465378_2115374528","id":"20170602-160222_471240064","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:21:46-0800","dateFinished":"2017-11-07T11:21:47-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5090"},{"text":"%md\nAccuracy is measured by the area under the ROC curve. The area measures the ability of the test to correctly classify true positives from false positives. A random predictor would have .5 accuracy. The closer the value is to 1 the better its predictions are. \n\nIn this case, the evaluation returns 84.8% precision. ","dateUpdated":"2017-11-07T10:47:45-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Accuracy is measured by the area under the ROC curve. The area measures the ability of the test to correctly classify true positives from false positives. A random predictor would have .5 accuracy. The closer the value is to 1 the better its predictions are. </p>\n<p>In this case, the evaluation returns 84.8% precision.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510080465380_2113066034","id":"20170602-161538_1648758337","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5091"},{"text":"//The evaluator will provide us with the score of the predictions by comparing the prediction to the label\nval accuracy = evaluator.evaluate(predictions)\nevaluator.explainParams()","dateUpdated":"2017-11-07T10:47:45-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\naccuracy: Double = 0.8484817813765183\n\n\n\n\nres126: String =\nlabelCol: label column name (default: label, current: label)\nmetricName: metric name in evaluation (areaUnderROC|areaUnderPR) (default: areaUnderROC)\nrawPredictionCol: raw prediction (a.k.a. confidence) column name (default: rawPrediction, current: prediction)\n"}]},"apps":[],"jobName":"paragraph_1510080465400_2117683021","id":"20170602-155622_1453197792","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5092"},{"title":"More metrics","text":"\nval lp = predictions.select(\"label\", \"prediction\")\nval counttotal = predictions.count()\nval correct = lp.filter($\"label\" === $\"prediction\").count()\nval wrong = lp.filter(not($\"label\" === $\"prediction\")).count()\nval ratioWrong = wrong.toDouble / counttotal.toDouble\nval ratioCorrect = correct.toDouble / counttotal.toDouble\nval truep = lp.filter($\"prediction\" === 0.0).filter($\"label\" === $\"prediction\").count() / counttotal.toDouble\nval truen = lp.filter($\"prediction\" === 1.0).filter($\"label\" === $\"prediction\").count() / counttotal.toDouble\nval falsep = lp.filter($\"prediction\" === 1.0).filter(not($\"label\" === $\"prediction\")).count() / counttotal.toDouble\nval falsen = lp.filter($\"prediction\" === 0.0).filter(not($\"label\" === $\"prediction\")).count() / counttotal.toDouble\nprintln(\"counttotal : \" + counttotal)\nprintln(\"correct : \" + correct)\nprintln(\"wrong: \" + wrong)\nprintln(\"ratio correct: \" + ratioCorrect)\nprintln(\"ratio true positive : \" + truep)\nprintln(\"ratio true negative : \" + truen)\nprintln(\"ratio wrong: \" + ratioWrong)\nprintln(\"ratio false positive : \" + falsep)\nprintln(\"ratio false negative : \" + falsen)\n","dateUpdated":"2017-11-07T10:47:45-0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nlp: org.apache.spark.sql.DataFrame = [label: double, prediction: double]\n\ncounttotal: Long = 667\n\ncorrect: Long = 574\n\nwrong: Long = 93\n\nratioWrong: Double = 0.13943028485757122\n\nratioCorrect: Double = 0.8605697151424287\n\ntruep: Double = 0.1184407796101949\n\ntruen: Double = 0.7421289355322339\n\nfalsep: Double = 0.0239880059970015\n\nfalsen: Double = 0.11544227886056972\ncounttotal : 667\ncorrect : 574\nwrong: 93\nratio correct: 0.8605697151424287\nratio true positive : 0.1184407796101949\nratio true negative : 0.7421289355322339\nratio wrong: 0.13943028485757122\nratio false positive : 0.0239880059970015\nratio false negative : 0.11544227886056972\n"}]},"apps":[],"jobName":"paragraph_1510080465401_2117298272","id":"20170508-155935_1678385472","dateCreated":"2017-11-07T10:47:45-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5093"},{"text":"cvModel.save(\"/user/user01/data/cvModel\")","user":"anonymous","dateUpdated":"2017-11-07T11:23:32-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510082586014_683172724","id":"20171107-112306_2124778398","dateCreated":"2017-11-07T11:23:06-0800","dateStarted":"2017-11-07T11:23:32-0800","dateFinished":"2017-11-07T11:23:36-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5094"},{"text":"import org.apache.spark.ml.tuning.{CrossValidator, CrossValidatorModel, ParamGridBuilder}\nvaltest sameCVModel = CrossValidatorModel.load(\"/user/user01/data/cvModel\")","user":"anonymous","dateUpdated":"2017-11-07T11:28:42-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark.ml.tuning.{CrossValidator, CrossValidatorModel, ParamGridBuilder}\n\nsameCVModel: org.apache.spark.ml.tuning.CrossValidatorModel = cv_987a837fbcf0\n"}]},"apps":[],"jobName":"paragraph_1510082640822_-38975771","id":"20171107-112400_500996456","dateCreated":"2017-11-07T11:24:00-0800","dateStarted":"2017-11-07T11:25:48-0800","dateFinished":"2017-11-07T11:25:54-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5095"},{"text":"val bestModel = sameCVModel.bestModel\nprintln(\"The Best Model:\\n--------------------\")\nval treeModel = bestModel.asInstanceOf[org.apache.spark.ml.PipelineModel].stages(3).asInstanceOf[DecisionTreeClassificationModel]\nprintln(\"Learned classification tree model:\\n\" + treeModel.toDebugString)","user":"anonymous","dateUpdated":"2017-11-07T11:28:14-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nbestModel: org.apache.spark.ml.Model[_] = pipeline_15ec900f12c2\nThe Best Model:\n--------------------\n\ntreeModel: org.apache.spark.ml.classification.DecisionTreeClassificationModel = DecisionTreeClassificationModel (uid=dtc_b058964cf978) of depth 5 with 53 nodes\nLearned classification tree model:\nDecisionTreeClassificationModel (uid=dtc_b058964cf978) of depth 5 with 53 nodes\n  If (feature 11 <= 3.0)\n   If (feature 3 <= 222.4)\n    If (feature 1 in {1.0})\n     If (feature 9 <= 13.1)\n      If (feature 10 <= 2.0)\n       Predict: 0.0\n      Else (feature 10 > 2.0)\n       Predict: 1.0\n     Else (feature 9 > 13.1)\n      Predict: 0.0\n    Else (feature 1 not in {1.0})\n     If (feature 4 <= 125.0)\n      If (feature 3 <= 209.5)\n       Predict: 1.0\n      Else (feature 3 > 209.5)\n       Predict: 1.0\n     Else (feature 4 > 125.0)\n      If (feature 3 <= 161.2)\n       Predict: 1.0\n      Else (feature 3 > 161.2)\n       Predict: 0.0\n   Else (feature 3 > 222.4)\n    If (feature 2 <= 0.0)\n     If (feature 5 <= 183.9)\n      If (feature 3 <= 273.3)\n       Predict: 1.0\n      Else (feature 3 > 273.3)\n       Predict: 0.0\n     Else (feature 5 > 183.9)\n      If (feature 3 <= 242.2)\n       Predict: 0.0\n      Else (feature 3 > 242.2)\n       Predict: 0.0\n    Else (feature 2 > 0.0)\n     If (feature 1 in {1.0})\n      If (feature 0 <= 57.0)\n       Predict: 1.0\n      Else (feature 0 > 57.0)\n       Predict: 0.0\n     Else (feature 1 not in {1.0})\n      If (feature 3 <= 299.5)\n       Predict: 1.0\n      Else (feature 3 > 299.5)\n       Predict: 0.0\n  Else (feature 11 > 3.0)\n   If (feature 3 <= 180.9)\n    If (feature 10 <= 0.0)\n     Predict: 1.0\n    Else (feature 10 > 0.0)\n     If (feature 5 <= 273.0)\n      If (feature 5 <= 226.1)\n       Predict: 0.0\n      Else (feature 5 > 226.1)\n       Predict: 0.0\n     Else (feature 5 > 273.0)\n      If (feature 0 <= 99.0)\n       Predict: 0.0\n      Else (feature 0 > 99.0)\n       Predict: 1.0\n   Else (feature 3 > 180.9)\n    If (feature 8 <= 104.0)\n     If (feature 8 <= 81.0)\n      If (feature 4 <= 94.0)\n       Predict: 1.0\n      Else (feature 4 > 94.0)\n       Predict: 0.0\n     Else (feature 8 > 81.0)\n      If (feature 4 <= 137.0)\n       Predict: 1.0\n      Else (feature 4 > 137.0)\n       Predict: 0.0\n    Else (feature 8 > 104.0)\n     If (feature 0 <= 135.0)\n      Predict: 0.0\n     Else (feature 0 > 135.0)\n      If (feature 0 <= 160.0)\n       Predict: 1.0\n      Else (feature 0 > 160.0)\n       Predict: 0.0\n\n"}]},"apps":[],"jobName":"paragraph_1510080465403_2118067770","id":"20170508-160007_1145560554","dateCreated":"2017-11-07T10:47:45-0800","dateStarted":"2017-11-07T11:28:14-0800","dateFinished":"2017-11-07T11:28:16-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5096"},{"text":"test.show","user":"anonymous","dateUpdated":"2017-11-07T11:28:46-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+\n|state|len|acode|intlplan|vplan|numvmail|tdmins|tdcalls|tdcharge|temins|tecalls|techarge|tnmins|tncalls|tncharge|timins|ticalls|ticharge|numcs|churn|\n+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+\n|   LA|117|  408|      No|   No|     0.0| 184.5|   97.0|   31.37| 351.6|   80.0|   29.89| 215.8|   90.0|    9.71|   8.7|    4.0|    2.35|  1.0|False|\n|   IN| 65|  415|      No|   No|     0.0| 129.1|  137.0|   21.95| 228.5|   83.0|   19.42| 208.8|  111.0|     9.4|  12.7|    6.0|    3.43|  4.0| True|\n|   NY|161|  415|      No|   No|     0.0| 332.9|   67.0|   56.59| 317.8|   97.0|   27.01| 160.6|  128.0|    7.23|   5.4|    9.0|    1.46|  4.0| True|\n|   SC|111|  415|      No|   No|     0.0| 110.4|  103.0|   18.77| 137.3|  102.0|   11.67| 189.6|  105.0|    8.53|   7.7|    6.0|    2.08|  2.0|False|\n|   HI| 49|  510|      No|   No|     0.0| 119.3|  117.0|   20.28| 215.1|  109.0|   18.28| 178.7|   90.0|    8.04|  11.1|    1.0|     3.0|  1.0|False|\n|   AK| 36|  408|      No|  Yes|    30.0| 146.3|  128.0|   24.87| 162.5|   80.0|   13.81| 129.3|  109.0|    5.82|  14.5|    6.0|    3.92|  0.0|False|\n|   MI| 65|  415|      No|   No|     0.0| 211.3|  120.0|   35.92| 162.6|  122.0|   13.82| 134.7|  118.0|    6.06|  13.2|    5.0|    3.56|  3.0|False|\n|   ID|119|  415|      No|   No|     0.0| 159.1|  114.0|   27.05| 231.3|  117.0|   19.66| 143.2|   91.0|    6.44|   8.8|    3.0|    2.38|  5.0| True|\n|   VA| 10|  408|      No|   No|     0.0| 186.1|  112.0|   31.64| 190.2|   66.0|   16.17| 282.8|   57.0|   12.73|  11.4|    6.0|    3.08|  2.0|False|\n|   WI| 68|  415|      No|   No|     0.0| 148.8|   70.0|    25.3| 246.5|  164.0|   20.95| 129.8|  103.0|    5.84|  12.1|    3.0|    3.27|  3.0|False|\n|   MN| 74|  510|      No|  Yes|    33.0| 193.7|   91.0|   32.93| 246.1|   96.0|   20.92| 138.0|   92.0|    6.21|  14.6|    3.0|    3.94|  2.0|False|\n|   HI| 85|  415|      No|   No|     0.0| 235.8|  109.0|   40.09| 157.2|   94.0|   13.36| 188.2|   99.0|    8.47|  12.0|    3.0|    3.24|  0.0|False|\n|   MN| 46|  415|      No|   No|     0.0| 214.1|   72.0|    36.4| 164.4|  104.0|   13.97| 177.5|  113.0|    7.99|   8.2|    3.0|    2.21|  2.0|False|\n|   VT|128|  510|      No|  Yes|    29.0| 179.3|  104.0|   30.48| 225.9|   86.0|    19.2| 323.0|   78.0|   14.54|   8.6|    7.0|    2.32|  0.0|False|\n|   LA|155|  415|      No|   No|     0.0| 203.4|  100.0|   34.58| 190.9|  104.0|   16.23| 196.0|  119.0|    8.82|   8.9|    4.0|     2.4|  0.0| True|\n|   MT| 73|  415|      No|   No|     0.0| 160.1|  110.0|   27.22| 213.3|   72.0|   18.13| 174.1|   72.0|    7.83|  13.0|    4.0|    3.51|  0.0|False|\n|   ID| 77|  415|      No|   No|     0.0| 251.8|   72.0|   42.81| 205.7|  126.0|   17.48| 275.2|  109.0|   12.38|   9.8|    7.0|    2.65|  2.0| True|\n|   MA|108|  415|      No|   No|     0.0| 178.3|  137.0|   30.31| 189.0|   76.0|   16.07| 129.1|  102.0|    5.81|  14.6|    5.0|    3.94|  0.0|False|\n|   KY| 95|  408|      No|   No|     0.0| 135.0|   99.0|   22.95| 183.6|  106.0|   15.61| 245.3|  102.0|   11.04|  12.5|    9.0|    3.38|  1.0|False|\n|   MI| 36|  510|      No|  Yes|    29.0| 281.4|  102.0|   47.84| 202.2|   76.0|   17.19| 187.2|  113.0|    8.42|   9.0|    6.0|    2.43|  2.0|False|\n+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510082842624_-1292363449","id":"20171107-112722_1762270725","dateCreated":"2017-11-07T11:27:22-0800","dateStarted":"2017-11-07T11:28:46-0800","dateFinished":"2017-11-07T11:28:47-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5097"},{"text":"\n val predictions2 =  sameCVModel.transform(test)","user":"anonymous","dateUpdated":"2017-11-07T11:29:47-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\npredictions2: org.apache.spark.sql.DataFrame = [state: string, len: int ... 24 more fields]\n"}]},"apps":[],"jobName":"paragraph_1510082926775_1413080258","id":"20171107-112846_1253092466","dateCreated":"2017-11-07T11:28:46-0800","dateStarted":"2017-11-07T11:29:47-0800","dateFinished":"2017-11-07T11:29:48-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5098"},{"text":"predictions2.show","user":"anonymous","dateUpdated":"2017-11-07T11:30:00-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+----------+-----+--------------------+-------------+--------------------+----------+\n|state|len|acode|intlplan|vplan|numvmail|tdmins|tdcalls|tdcharge|temins|tecalls|techarge|tnmins|tncalls|tncharge|timins|ticalls|ticharge|numcs|churn|iplanIndex|label|            features|rawPrediction|         probability|prediction|\n+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+----------+-----+--------------------+-------------+--------------------+----------+\n|   LA|117|  408|      No|   No|     0.0| 184.5|   97.0|   31.37| 351.6|   80.0|   29.89| 215.8|   90.0|    9.71|   8.7|    4.0|    2.35|  1.0|False|       0.0|  1.0|[117.0,0.0,0.0,18...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   IN| 65|  415|      No|   No|     0.0| 129.1|  137.0|   21.95| 228.5|   83.0|   19.42| 208.8|  111.0|     9.4|  12.7|    6.0|    3.43|  4.0| True|       0.0|  0.0|[65.0,0.0,0.0,129...|   [11.0,1.0]|[0.91666666666666...|       0.0|\n|   NY|161|  415|      No|   No|     0.0| 332.9|   67.0|   56.59| 317.8|   97.0|   27.01| 160.6|  128.0|    7.23|   5.4|    9.0|    1.46|  4.0| True|       0.0|  0.0|[161.0,0.0,0.0,33...|    [1.0,0.0]|           [1.0,0.0]|       0.0|\n|   SC|111|  415|      No|   No|     0.0| 110.4|  103.0|   18.77| 137.3|  102.0|   11.67| 189.6|  105.0|    8.53|   7.7|    6.0|    2.08|  2.0|False|       0.0|  1.0|[111.0,0.0,0.0,11...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   HI| 49|  510|      No|   No|     0.0| 119.3|  117.0|   20.28| 215.1|  109.0|   18.28| 178.7|   90.0|    8.04|  11.1|    1.0|     3.0|  1.0|False|       0.0|  1.0|[49.0,0.0,0.0,119...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   AK| 36|  408|      No|  Yes|    30.0| 146.3|  128.0|   24.87| 162.5|   80.0|   13.81| 129.3|  109.0|    5.82|  14.5|    6.0|    3.92|  0.0|False|       0.0|  1.0|[36.0,0.0,30.0,14...|    [1.0,9.0]|           [0.1,0.9]|       1.0|\n|   MI| 65|  415|      No|   No|     0.0| 211.3|  120.0|   35.92| 162.6|  122.0|   13.82| 134.7|  118.0|    6.06|  13.2|    5.0|    3.56|  3.0|False|       0.0|  1.0|[65.0,0.0,0.0,211...|  [10.0,27.0]|[0.27027027027027...|       1.0|\n|   ID|119|  415|      No|   No|     0.0| 159.1|  114.0|   27.05| 231.3|  117.0|   19.66| 143.2|   91.0|    6.44|   8.8|    3.0|    2.38|  5.0| True|       0.0|  0.0|[119.0,0.0,0.0,15...|   [11.0,1.0]|[0.91666666666666...|       0.0|\n|   VA| 10|  408|      No|   No|     0.0| 186.1|  112.0|   31.64| 190.2|   66.0|   16.17| 282.8|   57.0|   12.73|  11.4|    6.0|    3.08|  2.0|False|       0.0|  1.0|[10.0,0.0,0.0,186...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   WI| 68|  415|      No|   No|     0.0| 148.8|   70.0|    25.3| 246.5|  164.0|   20.95| 129.8|  103.0|    5.84|  12.1|    3.0|    3.27|  3.0|False|       0.0|  1.0|[68.0,0.0,0.0,148...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   MN| 74|  510|      No|  Yes|    33.0| 193.7|   91.0|   32.93| 246.1|   96.0|   20.92| 138.0|   92.0|    6.21|  14.6|    3.0|    3.94|  2.0|False|       0.0|  1.0|[74.0,0.0,33.0,19...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   HI| 85|  415|      No|   No|     0.0| 235.8|  109.0|   40.09| 157.2|   94.0|   13.36| 188.2|   99.0|    8.47|  12.0|    3.0|    3.24|  0.0|False|       0.0|  1.0|[85.0,0.0,0.0,235...|  [14.0,15.0]|[0.48275862068965...|       1.0|\n|   MN| 46|  415|      No|   No|     0.0| 214.1|   72.0|    36.4| 164.4|  104.0|   13.97| 177.5|  113.0|    7.99|   8.2|    3.0|    2.21|  2.0|False|       0.0|  1.0|[46.0,0.0,0.0,214...|  [10.0,27.0]|[0.27027027027027...|       1.0|\n|   VT|128|  510|      No|  Yes|    29.0| 179.3|  104.0|   30.48| 225.9|   86.0|    19.2| 323.0|   78.0|   14.54|   8.6|    7.0|    2.32|  0.0|False|       0.0|  1.0|[128.0,0.0,29.0,1...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   LA|155|  415|      No|   No|     0.0| 203.4|  100.0|   34.58| 190.9|  104.0|   16.23| 196.0|  119.0|    8.82|   8.9|    4.0|     2.4|  0.0| True|       0.0|  0.0|[155.0,0.0,0.0,20...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   MT| 73|  415|      No|   No|     0.0| 160.1|  110.0|   27.22| 213.3|   72.0|   18.13| 174.1|   72.0|    7.83|  13.0|    4.0|    3.51|  0.0|False|       0.0|  1.0|[73.0,0.0,0.0,160...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   ID| 77|  415|      No|   No|     0.0| 251.8|   72.0|   42.81| 205.7|  126.0|   17.48| 275.2|  109.0|   12.38|   9.8|    7.0|    2.65|  2.0| True|       0.0|  0.0|[77.0,0.0,0.0,251...|   [99.0,5.0]|[0.95192307692307...|       0.0|\n|   MA|108|  415|      No|   No|     0.0| 178.3|  137.0|   30.31| 189.0|   76.0|   16.07| 129.1|  102.0|    5.81|  14.6|    5.0|    3.94|  0.0|False|       0.0|  1.0|[108.0,0.0,0.0,17...|    [8.0,6.0]|[0.57142857142857...|       0.0|\n|   KY| 95|  408|      No|   No|     0.0| 135.0|   99.0|   22.95| 183.6|  106.0|   15.61| 245.3|  102.0|   11.04|  12.5|    9.0|    3.38|  1.0|False|       0.0|  1.0|[95.0,0.0,0.0,135...| [30.0,251.0]|[0.10676156583629...|       1.0|\n|   MI| 36|  510|      No|  Yes|    29.0| 281.4|  102.0|   47.84| 202.2|   76.0|   17.19| 187.2|  113.0|    8.42|   9.0|    6.0|    2.43|  2.0|False|       0.0|  1.0|[36.0,0.0,29.0,28...|   [2.0,23.0]|         [0.08,0.92]|       1.0|\n+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+----------+-----+--------------------+-------------+--------------------+----------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510082987661_-2094382660","id":"20171107-112947_525619195","dateCreated":"2017-11-07T11:29:47-0800","dateStarted":"2017-11-07T11:30:00-0800","dateFinished":"2017-11-07T11:30:01-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5099"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510083000048_598874965","id":"20171107-113000_1427348134","dateCreated":"2017-11-07T11:30:00-0800","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:5100"}],"name":"telco churn","id":"2D13URPYS","angularObjects":{"2CTHAGJ51:shared_process":[],"2CTFEJCW1:shared_process":[],"2CU928YA7:shared_process":[],"2CUSCHS1V:shared_process":[],"2CTGXT5AB:shared_process":[],"2CUHXVGRB:shared_process":[],"2CSNF42WC:shared_process":[],"2CU45S3XK:shared_process":[],"2CV35ABMV:shared_process":[],"2CUH4E5VP:shared_process":[],"2CVNXVD14:shared_process":[],"2CW8GSR5S:shared_process":[],"2CWBB1M88:shared_process":[],"2CT4ZSMCD:shared_process":[],"2CUQTDJZW:shared_process":[],"2CSMEVREU:shared_process":[],"2CVD5FM5C:shared_process":[],"2CTNB4WJK:shared_process":[],"2CUBZKAK6:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}