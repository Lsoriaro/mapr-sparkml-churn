{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494279914993_614378577","id":"20170508-144514_403247535","dateCreated":"2017-05-08T14:45:14-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:197","text":"import org.apache.spark._\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.Dataset\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.DecisionTreeClassifier\nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.feature.StringIndexer\nimport org.apache.spark.ml.tuning.ParamGridBuilder\nimport org.apache.spark.ml.tuning.CrossValidator\nimport org.apache.spark.ml.feature.VectorAssembler","dateUpdated":"2017-05-08T15:00:32-0700","dateFinished":"2017-05-08T15:01:23-0700","dateStarted":"2017-05-08T15:00:32-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark._\n\nimport org.apache.spark.sql.SparkSession\n\nimport org.apache.spark.sql.functions._\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.sql._\n\nimport org.apache.spark.sql.Dataset\n\nimport org.apache.spark.ml.Pipeline\n\nimport org.apache.spark.ml.classification.DecisionTreeClassifier\n\nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel\n\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\n\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\n\nimport org.apache.spark.ml.feature.StringIndexer\n\nimport org.apache.spark.ml.tuning.ParamGridBuilder\n\nimport org.apache.spark.ml.tuning.CrossValidator\n\nimport org.apache.spark.ml.feature.VectorAssembler\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494280832510_1432252402","id":"20170508-150032_326029627","dateCreated":"2017-05-08T15:00:32-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:371","text":"  case class Account(state: String, len: Integer, acode: String,\n    intlplan: String, vplan: String, numvmail: Double,\n    tdmins: Double, tdcalls: Double, tdcharge: Double,\n    temins: Double, tecalls: Double, techarge: Double,\n    tnmins: Double, tncalls: Double, tncharge: Double,\n    timins: Double, ticalls: Double, ticharge: Double,\n    numcs: Double, churn: String)\n  val schema = StructType(Array(\n    StructField(\"state\", StringType, true),\n    StructField(\"len\", IntegerType, true),\n    StructField(\"acode\", StringType, true),\n    StructField(\"intlplan\", StringType, true),\n    StructField(\"vplan\", StringType, true),\n    StructField(\"numvmail\", DoubleType, true),\n    StructField(\"tdmins\", DoubleType, true),\n    StructField(\"tdcalls\", DoubleType, true),\n    StructField(\"tdcharge\", DoubleType, true),\n    StructField(\"temins\", DoubleType, true),\n    StructField(\"tecalls\", DoubleType, true),\n    StructField(\"techarge\", DoubleType, true),\n    StructField(\"tnmins\", DoubleType, true),\n    StructField(\"tncalls\", DoubleType, true),\n    StructField(\"tncharge\", DoubleType, true),\n    StructField(\"timins\", DoubleType, true),\n    StructField(\"ticalls\", DoubleType, true),\n    StructField(\"ticharge\", DoubleType, true),\n    StructField(\"numcs\", DoubleType, true),\n    StructField(\"churn\", StringType, true)\n  ))","dateUpdated":"2017-05-08T15:01:31-0700","dateFinished":"2017-05-08T15:01:35-0700","dateStarted":"2017-05-08T15:01:31-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined class Account\nschema: org.apache.spark.sql.types.StructType = StructType(StructField(state,StringType,true), StructField(len,IntegerType,true), StructField(acode,StringType,true), StructField(intlplan,StringType,true), StructField(vplan,StringType,true), StructField(numvmail,DoubleType,true), StructField(tdmins,DoubleType,true), StructField(tdcalls,DoubleType,true), StructField(tdcharge,DoubleType,true), StructField(temins,DoubleType,true), StructField(tecalls,DoubleType,true), StructField(techarge,DoubleType,true), StructField(tnmins,DoubleType,true), StructField(tncalls,DoubleType,true), StructField(tncharge,DoubleType,true), StructField(timins,DoubleType,true), StructField(ticalls,DoubleType,true), StructField(ticharge,DoubleType,true), StructField(numcs,DoubleType,true), StructField(churn,StringT..."}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494280891041_1752440108","id":"20170508-150131_378637203","dateCreated":"2017-05-08T15:01:31-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:462","text":"import spark.implicits._\nval train: Dataset[Account] = spark.read.option(\"inferSchema\", \"false\")\n      .schema(schema).csv(\"/user/user01/data/churn-bigml-80.csv\").as[Account]\ntrain.take(1)\n","dateUpdated":"2017-05-08T15:03:24-0700","dateFinished":"2017-05-08T15:03:37-0700","dateStarted":"2017-05-08T15:03:24-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport spark.implicits._\n\ntrain: org.apache.spark.sql.Dataset[Account] = [state: string, len: int ... 18 more fields]\n\nres0: Array[Account] = Array(Account(KS,128,415,No,Yes,25.0,265.1,110.0,45.07,197.4,99.0,16.78,244.7,91.0,11.01,10.0,3.0,2.7,1.0,False))\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494281004434_1784559802","id":"20170508-150324_497571301","dateCreated":"2017-05-08T15:03:24-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:549","text":"val test: Dataset[Account] = spark.read.option(\"inferSchema\", \"false\")\n      .schema(schema).csv(\"/user/user01/data/churn-bigml-20.csv\").as[Account]\n    test.take(2)\n    ","dateUpdated":"2017-05-08T15:04:08-0700","dateFinished":"2017-05-08T15:04:10-0700","dateStarted":"2017-05-08T15:04:08-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ntest: org.apache.spark.sql.Dataset[Account] = [state: string, len: int ... 18 more fields]\n\nres1: Array[Account] = Array(Account(LA,117,408,No,No,0.0,184.5,97.0,31.37,351.6,80.0,29.89,215.8,90.0,9.71,8.7,4.0,2.35,1.0,False), Account(IN,65,415,No,No,0.0,129.1,137.0,21.95,228.5,83.0,19.42,208.8,111.0,9.4,12.7,6.0,3.43,4.0,True))\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494281048853_-478671146","id":"20170508-150408_505244914","dateCreated":"2017-05-08T15:04:08-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:633","text":"train.cache\ntrain.printSchema()\n    train.show\n    train.createOrReplaceTempView(\"account\")\n    spark.catalog.cacheTable(\"account\")","dateUpdated":"2017-05-08T15:05:05-0700","dateFinished":"2017-05-08T15:05:10-0700","dateStarted":"2017-05-08T15:05:05-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres2: train.type = [state: string, len: int ... 18 more fields]\nroot\n |-- state: string (nullable = true)\n |-- len: integer (nullable = true)\n |-- acode: string (nullable = true)\n |-- intlplan: string (nullable = true)\n |-- vplan: string (nullable = true)\n |-- numvmail: double (nullable = true)\n |-- tdmins: double (nullable = true)\n |-- tdcalls: double (nullable = true)\n |-- tdcharge: double (nullable = true)\n |-- temins: double (nullable = true)\n |-- tecalls: double (nullable = true)\n |-- techarge: double (nullable = true)\n |-- tnmins: double (nullable = true)\n |-- tncalls: double (nullable = true)\n |-- tncharge: double (nullable = true)\n |-- timins: double (nullable = true)\n |-- ticalls: double (nullable = true)\n |-- ticharge: double (nullable = true)\n |-- numcs: double (nullable = true)\n |-- churn: string (nullable = true)\n\n+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+\n|state|len|acode|intlplan|vplan|numvmail|tdmins|tdcalls|tdcharge|temins|tecalls|techarge|tnmins|tncalls|tncharge|timins|ticalls|ticharge|numcs|churn|\n+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+\n|   KS|128|  415|      No|  Yes|    25.0| 265.1|  110.0|   45.07| 197.4|   99.0|   16.78| 244.7|   91.0|   11.01|  10.0|    3.0|     2.7|  1.0|False|\n|   OH|107|  415|      No|  Yes|    26.0| 161.6|  123.0|   27.47| 195.5|  103.0|   16.62| 254.4|  103.0|   11.45|  13.7|    3.0|     3.7|  1.0|False|\n|   NJ|137|  415|      No|   No|     0.0| 243.4|  114.0|   41.38| 121.2|  110.0|    10.3| 162.6|  104.0|    7.32|  12.2|    5.0|    3.29|  0.0|False|\n|   OH| 84|  408|     Yes|   No|     0.0| 299.4|   71.0|    50.9|  61.9|   88.0|    5.26| 196.9|   89.0|    8.86|   6.6|    7.0|    1.78|  2.0|False|\n|   OK| 75|  415|     Yes|   No|     0.0| 166.7|  113.0|   28.34| 148.3|  122.0|   12.61| 186.9|  121.0|    8.41|  10.1|    3.0|    2.73|  3.0|False|\n|   AL|118|  510|     Yes|   No|     0.0| 223.4|   98.0|   37.98| 220.6|  101.0|   18.75| 203.9|  118.0|    9.18|   6.3|    6.0|     1.7|  0.0|False|\n|   MA|121|  510|      No|  Yes|    24.0| 218.2|   88.0|   37.09| 348.5|  108.0|   29.62| 212.6|  118.0|    9.57|   7.5|    7.0|    2.03|  3.0|False|\n|   MO|147|  415|     Yes|   No|     0.0| 157.0|   79.0|   26.69| 103.1|   94.0|    8.76| 211.8|   96.0|    9.53|   7.1|    6.0|    1.92|  0.0|False|\n|   WV|141|  415|     Yes|  Yes|    37.0| 258.6|   84.0|   43.96| 222.0|  111.0|   18.87| 326.4|   97.0|   14.69|  11.2|    5.0|    3.02|  0.0|False|\n|   RI| 74|  415|      No|   No|     0.0| 187.7|  127.0|   31.91| 163.4|  148.0|   13.89| 196.0|   94.0|    8.82|   9.1|    5.0|    2.46|  0.0|False|\n|   IA|168|  408|      No|   No|     0.0| 128.8|   96.0|    21.9| 104.9|   71.0|    8.92| 141.1|  128.0|    6.35|  11.2|    2.0|    3.02|  1.0|False|\n|   MT| 95|  510|      No|   No|     0.0| 156.6|   88.0|   26.62| 247.6|   75.0|   21.05| 192.3|  115.0|    8.65|  12.3|    5.0|    3.32|  3.0|False|\n|   IA| 62|  415|      No|   No|     0.0| 120.7|   70.0|   20.52| 307.2|   76.0|   26.11| 203.0|   99.0|    9.14|  13.1|    6.0|    3.54|  4.0|False|\n|   ID| 85|  408|      No|  Yes|    27.0| 196.4|  139.0|   33.39| 280.9|   90.0|   23.88|  89.3|   75.0|    4.02|  13.8|    4.0|    3.73|  1.0|False|\n|   VT| 93|  510|      No|   No|     0.0| 190.7|  114.0|   32.42| 218.2|  111.0|   18.55| 129.6|  121.0|    5.83|   8.1|    3.0|    2.19|  3.0|False|\n|   VA| 76|  510|      No|  Yes|    33.0| 189.7|   66.0|   32.25| 212.8|   65.0|   18.09| 165.7|  108.0|    7.46|  10.0|    5.0|     2.7|  1.0|False|\n|   TX| 73|  415|      No|   No|     0.0| 224.4|   90.0|   38.15| 159.5|   88.0|   13.56| 192.8|   74.0|    8.68|  13.0|    2.0|    3.51|  1.0|False|\n|   FL|147|  415|      No|   No|     0.0| 155.1|  117.0|   26.37| 239.7|   93.0|   20.37| 208.8|  133.0|     9.4|  10.6|    4.0|    2.86|  0.0|False|\n|   CO| 77|  408|      No|   No|     0.0|  62.4|   89.0|   10.61| 169.9|  121.0|   14.44| 209.6|   64.0|    9.43|   5.7|    6.0|    1.54|  5.0| True|\n|   AZ|130|  415|      No|   No|     0.0| 183.0|  112.0|   31.11|  72.9|   99.0|     6.2| 181.8|   78.0|    8.18|   9.5|   19.0|    2.57|  0.0|False|\n+-----+---+-----+--------+-----+--------+------+-------+--------+------+-------+--------+------+-------+--------+------+-------+--------+-----+-----+\nonly showing top 20 rows\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494281105706_-1854304995","id":"20170508-150505_835102609","dateCreated":"2017-05-08T15:05:05-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:726","text":"    train.groupBy(\"churn\").count.show\n    val fractions = Map(\"False\" -> .17, \"True\" -> 1.0)\n    //Here we're keeping all instances of the Churn=True class, but downsampling the Churn=False class to a fraction of 388/2278.\n    val strain = train.stat.sampleBy(\"churn\", fractions, 36L)\n\n    strain.groupBy(\"churn\").count.show\n    val ntrain = strain.drop(\"state\").drop(\"acode\").drop(\"vplan\").drop(\"tdcharge\").drop(\"techarge\")\n    println(ntrain.count)\n    ntrain.show","dateUpdated":"2017-05-08T15:05:43-0700","dateFinished":"2017-05-08T15:05:58-0700","dateStarted":"2017-05-08T15:05:44-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+-----+\n|churn|count|\n+-----+-----+\n|False| 2278|\n| True|  388|\n+-----+-----+\n\n\nfractions: scala.collection.immutable.Map[String,Double] = Map(False -> 0.17, True -> 1.0)\n\nstrain: org.apache.spark.sql.DataFrame = [state: string, len: int ... 18 more fields]\n+-----+-----+\n|churn|count|\n+-----+-----+\n|False|  379|\n| True|  388|\n+-----+-----+\n\n\nntrain: org.apache.spark.sql.DataFrame = [len: int, intlplan: string ... 13 more fields]\n767\n+---+--------+--------+------+-------+------+-------+------+-------+--------+------+-------+--------+-----+-----+\n|len|intlplan|numvmail|tdmins|tdcalls|temins|tecalls|tnmins|tncalls|tncharge|timins|ticalls|ticharge|numcs|churn|\n+---+--------+--------+------+-------+------+-------+------+-------+--------+------+-------+--------+-----+-----+\n|128|      No|    25.0| 265.1|  110.0| 197.4|   99.0| 244.7|   91.0|   11.01|  10.0|    3.0|     2.7|  1.0|False|\n| 77|      No|     0.0|  62.4|   89.0| 169.9|  121.0| 209.6|   64.0|    9.43|   5.7|    6.0|    1.54|  5.0| True|\n| 54|      No|     0.0| 134.3|   73.0| 155.5|  100.0| 102.1|   68.0|    4.59|  14.7|    4.0|    3.97|  3.0|False|\n| 12|      No|     0.0| 249.6|  118.0| 252.4|  119.0| 280.2|   90.0|   12.61|  11.8|    3.0|    3.19|  1.0| True|\n| 57|      No|    25.0| 176.8|   94.0| 195.0|   75.0| 213.5|  116.0|    9.61|   8.3|    4.0|    2.24|  0.0|False|\n|135|     Yes|    41.0| 173.1|   85.0| 203.9|  107.0| 122.2|   78.0|     5.5|  14.6|   15.0|    3.94|  0.0| True|\n|160|      No|     0.0|  85.8|   77.0| 165.3|  110.0| 178.5|   92.0|    8.03|   9.2|    4.0|    2.48|  3.0|False|\n| 96|      No|     0.0| 160.2|  117.0| 267.5|   67.0| 228.5|   68.0|   10.28|   9.3|    5.0|    2.51|  2.0|False|\n| 87|      No|     0.0| 151.0|   83.0| 219.7|  116.0| 203.9|  127.0|    9.18|   9.7|    3.0|    2.62|  5.0| True|\n|121|      No|    30.0| 198.4|  129.0|  75.3|   77.0| 181.2|   77.0|    8.15|   5.8|    3.0|    1.57|  3.0| True|\n| 38|      No|     0.0| 131.2|   98.0| 162.9|   97.0| 159.0|  106.0|    7.15|   8.2|    6.0|    2.21|  2.0|False|\n|150|      No|     0.0| 178.9|  101.0| 169.1|  110.0| 148.6|  100.0|    6.69|  13.8|    3.0|    3.73|  4.0| True|\n|147|      No|     0.0| 248.6|   83.0| 148.9|   85.0| 172.5|  109.0|    7.76|   8.0|    4.0|    2.16|  3.0|False|\n| 82|      No|     0.0| 300.3|  109.0| 181.0|  100.0| 270.1|   73.0|   12.15|  11.7|    4.0|    3.16|  0.0| True|\n|144|      No|     0.0|  61.6|  117.0|  77.1|   85.0| 173.0|   99.0|    7.79|   8.2|    7.0|    2.21|  4.0| True|\n| 70|      No|     0.0| 170.2|   98.0| 155.2|  102.0| 228.6|   76.0|   10.29|  15.0|    2.0|    4.05|  1.0|False|\n|106|      No|     0.0| 210.6|   96.0| 249.2|   85.0| 191.4|   88.0|    8.61|  12.4|    1.0|    3.35|  2.0| True|\n| 94|      No|     0.0| 157.9|  105.0| 155.0|  101.0| 189.6|   84.0|    8.53|   8.0|    5.0|    2.16|  4.0| True|\n|128|      No|     0.0| 237.9|  125.0| 247.6|   93.0| 208.9|   68.0|     9.4|  13.9|    4.0|    3.75|  1.0| True|\n| 82|      No|     0.0| 143.9|   61.0| 194.9|  105.0| 109.6|   94.0|    4.93|  11.1|    2.0|     3.0|  1.0|False|\n+---+--------+--------+------+-------+------+-------+------+-------+--------+------+-------+--------+-----+-----+\nonly showing top 20 rows\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494281143985_1653142599","id":"20170508-150543_958647761","dateCreated":"2017-05-08T15:05:43-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:813","text":"    val ipindexer = new StringIndexer()\n      .setInputCol(\"intlplan\")\n      .setOutputCol(\"iplanIndex\")\n    val labelindexer = new StringIndexer()\n      .setInputCol(\"churn\")\n      .setOutputCol(\"label\")\n    val featureCols = Array(\"len\", \"iplanIndex\", \"numvmail\", \"tdmins\", \"tdcalls\", \"temins\", \"tecalls\", \"tnmins\", \"tncalls\", \"timins\", \"ticalls\", \"numcs\")\n\n    val assembler = new VectorAssembler()\n      .setInputCols(featureCols)\n      .setOutputCol(\"features\")","dateUpdated":"2017-05-08T15:15:57-0700","dateFinished":"2017-05-08T15:16:01-0700","dateStarted":"2017-05-08T15:15:58-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nipindexer: org.apache.spark.ml.feature.StringIndexer = strIdx_9a4ffd99690d\n\nlabelindexer: org.apache.spark.ml.feature.StringIndexer = strIdx_2cb923441641\n\nfeatureCols: Array[String] = Array(len, iplanIndex, numvmail, tdmins, tdcalls, temins, tecalls, tnmins, tncalls, timins, ticalls, numcs)\n\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_83d06ca93b78\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494281757987_84799337","id":"20170508-151557_1422077156","dateCreated":"2017-05-08T15:15:57-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:904","text":"    val dTree = new DecisionTreeClassifier().setLabelCol(\"label\")\n      .setFeaturesCol(\"features\")\n\n    // Chain indexers and tree in a Pipeline.\n    val pipeline = new Pipeline()\n      .setStages(Array(ipindexer, labelindexer, assembler, dTree))\n    // Search through decision tree's maxDepth parameter for best model\n    val paramGrid = new ParamGridBuilder().addGrid(dTree.maxDepth, Array(2, 3, 4, 5, 6, 7)).build()","dateUpdated":"2017-05-08T15:19:03-0700","dateFinished":"2017-05-08T15:19:07-0700","dateStarted":"2017-05-08T15:19:03-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndTree: org.apache.spark.ml.classification.DecisionTreeClassifier = dtc_4ad1ee4d9f09\n\npipeline: org.apache.spark.ml.Pipeline = pipeline_d612b01f8e34\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparamGrid: Array[org.apache.spark.ml.param.ParamMap] =\nArray({\n\tdtc_4ad1ee4d9f09-maxDepth: 2\n}, {\n\tdtc_4ad1ee4d9f09-maxDepth: 3\n}, {\n\tdtc_4ad1ee4d9f09-maxDepth: 4\n}, {\n\tdtc_4ad1ee4d9f09-maxDepth: 5\n}, {\n\tdtc_4ad1ee4d9f09-maxDepth: 6\n}, {\n\tdtc_4ad1ee4d9f09-maxDepth: 7\n})\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494281943273_68083279","id":"20170508-151903_1365343172","dateCreated":"2017-05-08T15:19:03-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:988","text":"    val evaluator = new BinaryClassificationEvaluator()\n      .setLabelCol(\"label\")\n      .setRawPredictionCol(\"prediction\")\n\n    // Set up 3-fold cross validation\n    val crossval = new CrossValidator().setEstimator(pipeline)\n      .setEvaluator(evaluator)\n      .setEstimatorParamMaps(paramGrid).setNumFolds(3)","dateUpdated":"2017-05-08T15:19:26-0700","dateFinished":"2017-05-08T15:19:28-0700","dateStarted":"2017-05-08T15:19:26-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nevaluator: org.apache.spark.ml.evaluation.BinaryClassificationEvaluator = binEval_3d6abc6ea9ed\n\ncrossval: org.apache.spark.ml.tuning.CrossValidator = cv_2d1013301c4d\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494281966639_1180254432","id":"20170508-151926_10766097","dateCreated":"2017-05-08T15:19:26-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1072","text":"val cvModel = crossval.fit(ntrain)","dateUpdated":"2017-05-08T15:19:47-0700","dateFinished":"2017-05-08T15:20:23-0700","dateStarted":"2017-05-08T15:19:47-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ncvModel: org.apache.spark.ml.tuning.CrossValidatorModel = cv_2d1013301c4d\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494281987038_-922367659","id":"20170508-151947_197896730","dateCreated":"2017-05-08T15:19:47-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1159","text":"    val bestModel = cvModel.bestModel\n    println(\"The Best Model and Parameters:\\n--------------------\")\n    println(bestModel.asInstanceOf[org.apache.spark.ml.PipelineModel].stages(3))\n    bestModel.asInstanceOf[org.apache.spark.ml.PipelineModel]\n      .stages(3)\n      .extractParamMap\n\n    val treeModel = bestModel.asInstanceOf[org.apache.spark.ml.PipelineModel].stages(3).asInstanceOf[DecisionTreeClassificationModel]\n    println(\"Learned classification tree model:\\n\" + treeModel.toDebugString)","dateUpdated":"2017-05-08T15:58:48-0700","dateFinished":"2017-05-08T15:58:53-0700","dateStarted":"2017-05-08T15:58:48-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nbestModel: org.apache.spark.ml.Model[_] = pipeline_d612b01f8e34\nThe Best Model and Parameters:\n--------------------\nDecisionTreeClassificationModel (uid=dtc_4ad1ee4d9f09) of depth 5 with 53 nodes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nres13: org.apache.spark.ml.param.ParamMap =\n{\n\tdtc_4ad1ee4d9f09-cacheNodeIds: false,\n\tdtc_4ad1ee4d9f09-checkpointInterval: 10,\n\tdtc_4ad1ee4d9f09-featuresCol: features,\n\tdtc_4ad1ee4d9f09-impurity: gini,\n\tdtc_4ad1ee4d9f09-labelCol: label,\n\tdtc_4ad1ee4d9f09-maxBins: 32,\n\tdtc_4ad1ee4d9f09-maxDepth: 5,\n\tdtc_4ad1ee4d9f09-maxMemoryInMB: 256,\n\tdtc_4ad1ee4d9f09-minInfoGain: 0.0,\n\tdtc_4ad1ee4d9f09-minInstancesPerNode: 1,\n\tdtc_4ad1ee4d9f09-predictionCol: prediction,\n\tdtc_4ad1ee4d9f09-probabilityCol: probability,\n\tdtc_4ad1ee4d9f09-rawPredictionCol: rawPrediction,\n\tdtc_4ad1ee4d9f09-seed: 159147643\n}\n\ntreeModel: org.apache.spark.ml.classification.DecisionTreeClassificationModel = DecisionTreeClassificationModel (uid=dtc_4ad1ee4d9f09) of depth 5 with 53 nodes\nLearned classification tree model:\nDecisionTreeClassificationModel (uid=dtc_4ad1ee4d9f09) of depth 5 with 53 nodes\n  If (feature 11 <= 3.0)\n   If (feature 3 <= 222.4)\n    If (feature 1 in {1.0})\n     If (feature 9 <= 13.1)\n      If (feature 10 <= 2.0)\n       Predict: 0.0\n      Else (feature 10 > 2.0)\n       Predict: 1.0\n     Else (feature 9 > 13.1)\n      Predict: 0.0\n    Else (feature 1 not in {1.0})\n     If (feature 4 <= 125.0)\n      If (feature 3 <= 209.5)\n       Predict: 1.0\n      Else (feature 3 > 209.5)\n       Predict: 1.0\n     Else (feature 4 > 125.0)\n      If (feature 3 <= 161.2)\n       Predict: 1.0\n      Else (feature 3 > 161.2)\n       Predict: 0.0\n   Else (feature 3 > 222.4)\n    If (feature 2 <= 0.0)\n     If (feature 5 <= 183.9)\n      If (feature 3 <= 273.3)\n       Predict: 1.0\n      Else (feature 3 > 273.3)\n       Predict: 0.0\n     Else (feature 5 > 183.9)\n      If (feature 3 <= 242.2)\n       Predict: 0.0\n      Else (feature 3 > 242.2)\n       Predict: 0.0\n    Else (feature 2 > 0.0)\n     If (feature 1 in {1.0})\n      If (feature 0 <= 57.0)\n       Predict: 1.0\n      Else (feature 0 > 57.0)\n       Predict: 0.0\n     Else (feature 1 not in {1.0})\n      If (feature 3 <= 299.5)\n       Predict: 1.0\n      Else (feature 3 > 299.5)\n       Predict: 0.0\n  Else (feature 11 > 3.0)\n   If (feature 3 <= 180.9)\n    If (feature 10 <= 0.0)\n     Predict: 1.0\n    Else (feature 10 > 0.0)\n     If (feature 5 <= 273.0)\n      If (feature 5 <= 226.1)\n       Predict: 0.0\n      Else (feature 5 > 226.1)\n       Predict: 0.0\n     Else (feature 5 > 273.0)\n      If (feature 0 <= 99.0)\n       Predict: 0.0\n      Else (feature 0 > 99.0)\n       Predict: 1.0\n   Else (feature 3 > 180.9)\n    If (feature 8 <= 104.0)\n     If (feature 8 <= 81.0)\n      If (feature 4 <= 94.0)\n       Predict: 1.0\n      Else (feature 4 > 94.0)\n       Predict: 0.0\n     Else (feature 8 > 81.0)\n      If (feature 4 <= 137.0)\n       Predict: 1.0\n      Else (feature 4 > 137.0)\n       Predict: 0.0\n    Else (feature 8 > 104.0)\n     If (feature 0 <= 135.0)\n      Predict: 0.0\n     Else (feature 0 > 135.0)\n      If (feature 0 <= 160.0)\n       Predict: 1.0\n      Else (feature 0 > 160.0)\n       Predict: 0.0\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494284328218_588666033","id":"20170508-155848_1997894070","dateCreated":"2017-05-08T15:58:48-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1277","text":"  val predictions = cvModel.transform(test)\n    val accuracy = evaluator.evaluate(predictions)\n    evaluator.explainParams()","dateUpdated":"2017-05-08T15:59:16-0700","dateFinished":"2017-05-08T15:59:19-0700","dateStarted":"2017-05-08T15:59:16-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\npredictions: org.apache.spark.sql.DataFrame = [state: string, len: int ... 24 more fields]\n\naccuracy: Double = 0.8484817813765183\n\n\n\n\nres15: String =\nlabelCol: label column name (default: label, current: label)\nmetricName: metric name in evaluation (areaUnderROC|areaUnderPR) (default: areaUnderROC)\nrawPredictionCol: raw prediction (a.k.a. confidence) column name (default: rawPrediction, current: prediction)\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494284356519_-480889937","id":"20170508-155916_542263952","dateCreated":"2017-05-08T15:59:16-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1361","text":"    val predictionAndLabels = predictions.select(\"prediction\", \"label\").rdd.map(x =>\n      (x(0).asInstanceOf[Double], x(1).asInstanceOf[Double]))\n    val metrics = new BinaryClassificationMetrics(predictionAndLabels)\n    println(\"area under the precision-recall curve: \" + metrics.areaUnderPR)\n    println(\"area under the receiver operating characteristic (ROC) curve : \" + metrics.areaUnderROC)\n\n    println(metrics.fMeasureByThreshold())","dateUpdated":"2017-05-08T15:59:35-0700","dateFinished":"2017-05-08T15:59:39-0700","dateStarted":"2017-05-08T15:59:35-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\npredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[1197] at map at <console>:87\n\nmetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@5c4c62e0\narea under the precision-recall curve: 0.9747578698231796\narea under the receiver operating characteristic (ROC) curve : 0.8484817813765183\nMapPartitionsRDD[1215] at map at BinaryClassificationMetrics.scala:214\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494284375085_1134902202","id":"20170508-155935_1678385472","dateCreated":"2017-05-08T15:59:35-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1448","text":"val result = predictions.select(\"label\", \"prediction\", \"probability\")\n    result.show\n\n    val lp = predictions.select(\"label\", \"prediction\")\n    val counttotal = predictions.count()\n    val correct = lp.filter($\"label\" === $\"prediction\").count()\n    val wrong = lp.filter(not($\"label\" === $\"prediction\")).count()\n    val ratioWrong = wrong.toDouble / counttotal.toDouble\n    val ratioCorrect = correct.toDouble / counttotal.toDouble\n    val truep = lp.filter($\"prediction\" === 0.0).filter($\"label\" === $\"prediction\").count() / counttotal.toDouble\n    val truen = lp.filter($\"prediction\" === 1.0).filter($\"label\" === $\"prediction\").count() / counttotal.toDouble\n    val falsep = lp.filter($\"prediction\" === 1.0).filter(not($\"label\" === $\"prediction\")).count() / counttotal.toDouble\n    val falsen = lp.filter($\"prediction\" === 0.0).filter(not($\"label\" === $\"prediction\")).count() / counttotal.toDouble\n\n    println(\"counttotal : \" + counttotal)\n    println(\"correct : \" + correct)\n    println(\"wrong: \" + wrong)\n    println(\"ratio wrong: \" + ratioWrong)\n    println(\"ratio correct: \" + ratioCorrect)\n    println(\"ratio true positive : \" + truep)\n    println(\"ratio false positive : \" + falsep)\n    println(\"ratio true negative : \" + truen)\n    println(\"ratio false negative : \" + falsen)\n\n    println(\"wrong: \" + wrong)\n\n    val equalp = predictions.selectExpr(\n      \"double(round(prediction)) as prediction\", \"label\",\n      \"\"\"CASE double(round(prediction)) = label WHEN true then 1 ELSE 0 END as equal\"\"\"\n    )\n    equalp.show","dateUpdated":"2017-05-08T16:00:07-0700","dateFinished":"2017-05-08T16:00:26-0700","dateStarted":"2017-05-08T16:00:08-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nresult: org.apache.spark.sql.DataFrame = [label: double, prediction: double ... 1 more field]\n+-----+----------+--------------------+\n|label|prediction|         probability|\n+-----+----------+--------------------+\n|  1.0|       1.0|[0.10676156583629...|\n|  0.0|       0.0|[0.91666666666666...|\n|  0.0|       0.0|           [1.0,0.0]|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|           [0.1,0.9]|\n|  1.0|       1.0|[0.27027027027027...|\n|  0.0|       0.0|[0.91666666666666...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.48275862068965...|\n|  1.0|       1.0|[0.27027027027027...|\n|  1.0|       1.0|[0.10676156583629...|\n|  0.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|[0.10676156583629...|\n|  0.0|       0.0|[0.95192307692307...|\n|  1.0|       0.0|[0.57142857142857...|\n|  1.0|       1.0|[0.10676156583629...|\n|  1.0|       1.0|         [0.08,0.92]|\n+-----+----------+--------------------+\nonly showing top 20 rows\n\n\nlp: org.apache.spark.sql.DataFrame = [label: double, prediction: double]\n\ncounttotal: Long = 667\n\ncorrect: Long = 574\n\nwrong: Long = 93\n\nratioWrong: Double = 0.13943028485757122\n\nratioCorrect: Double = 0.8605697151424287\n\ntruep: Double = 0.1184407796101949\n\ntruen: Double = 0.7421289355322339\n\nfalsep: Double = 0.0239880059970015\n\nfalsen: Double = 0.11544227886056972\ncounttotal : 667\ncorrect : 574\nwrong: 93\nratio wrong: 0.13943028485757122\nratio correct: 0.8605697151424287\nratio true positive : 0.1184407796101949\nratio false positive : 0.0239880059970015\nratio true negative : 0.7421289355322339\nratio false negative : 0.11544227886056972\nwrong: 93\n\nequalp: org.apache.spark.sql.DataFrame = [prediction: double, label: double ... 1 more field]\n+----------+-----+-----+\n|prediction|label|equal|\n+----------+-----+-----+\n|       1.0|  1.0|    1|\n|       0.0|  0.0|    1|\n|       0.0|  0.0|    1|\n|       1.0|  1.0|    1|\n|       1.0|  1.0|    1|\n|       1.0|  1.0|    1|\n|       1.0|  1.0|    1|\n|       0.0|  0.0|    1|\n|       1.0|  1.0|    1|\n|       1.0|  1.0|    1|\n|       1.0|  1.0|    1|\n|       1.0|  1.0|    1|\n|       1.0|  1.0|    1|\n|       1.0|  1.0|    1|\n|       1.0|  0.0|    0|\n|       1.0|  1.0|    1|\n|       0.0|  0.0|    1|\n|       0.0|  1.0|    0|\n|       1.0|  1.0|    1|\n|       1.0|  1.0|    1|\n+----------+-----+-----+\nonly showing top 20 rows\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1494284407931_1396192678","id":"20170508-160007_1145560554","dateCreated":"2017-05-08T16:00:07-0700","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1538"}],"name":"/spark test","id":"2CFPBN6RK","angularObjects":{"2CHXR4W7F:shared_process":[],"2CG6DXK9D:shared_process":[],"2CHH1ACAC:shared_process":[],"2CF1TTFEJ:shared_process":[],"2CHDCCPCB:shared_process":[],"2CFEZNG6F:shared_process":[],"2CESGQKN8:shared_process":[],"2CGFE6AB5:shared_process":[],"2CFJ35H8N:shared_process":[],"2CFZT44X4:shared_process":[],"2CH5RZKHJ:shared_process":[],"2CEX6K3ZQ:shared_process":[],"2CGKBWFY7:shared_process":[],"2CJ888C6R:shared_process":[],"2CEUCFBEM:shared_process":[],"2CGZAMKG3:shared_process":[],"2CJANSWCG:shared_process":[],"2CGNBN97X:shared_process":[],"2CF8ATGYV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}